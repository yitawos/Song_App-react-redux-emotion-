[{"C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\index.js":"1","C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\App.js":"2","C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\feture\\user.js":"3","C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\data.js":"4"},{"size":464,"mtime":1676375272523,"results":"5","hashOfConfig":"6"},{"size":3247,"mtime":1676384685475,"results":"7","hashOfConfig":"6"},{"size":954,"mtime":1676378223408,"results":"8","hashOfConfig":"6"},{"size":333,"mtime":1676383592127,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1k22gx9",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\index.js",[],[],[],"C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\App.js",[],[],"C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\feture\\user.js",["24"],[],"import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'\r\nimport SongData from '../data'\r\n\r\nexport const getpost = createAsyncThunk(\"post/getpost\", async ({id}) => {\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts`).then((res)=> res.json())\r\n})\r\n\r\nexport const sclice = createSlice({\r\n    name:\"users\",\r\n    initialState: {value : SongData},\r\n    reducers : {\r\n        addUser : (state,action) => {\r\n             state.value.push(action.payload)\r\n    },\r\n\r\n        deleteUser: (state, action) => {\r\n            state.value = state.value.filter((user) => user.id !== action.payload.id);\r\n      },\r\n\r\n      updateUsername: (state, action) => {\r\n       state.value.map((user) => {\r\n          if (user.id === action.payload.id) {\r\n          return  user.username = action.payload.username;\r\n          }\r\n        })\r\n      }\r\n    \r\n}\r\n})\r\n\r\nexport const {addUser, deleteUser,updateUsername } = sclice.actions\r\nexport default sclice.reducer","C:\\Users\\Senait\\Desktop\\Test\\song_app\\src\\data.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":21,"column":31,"nodeType":"27","messageId":"28","endLine":21,"endColumn":33},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]